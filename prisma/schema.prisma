generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model prueba_w {
  id               BigInt                 @id @default(autoincrement())
  codigo           String
  voltaje          Decimal  
  corriente        Decimal  
  potencia         Decimal  
  energia          Decimal  
}

model ConfiguracionAlerta {
  id                      BigInt               @id @default(autoincrement())
  nombre                  String
  tiempo                  BigInt
  consumo                 BigInt
  usuarioConfiguracionId  BigInt 
  usuarioConfiguracion    UsuarioConfiguracion @relation("ConfiguracionAlertaRelation", fields: [usuarioConfiguracionId], references: [id])
}

model PlanDisponible {
  id              BigInt                 @id @default(autoincrement())
  nombre          String
  duracion        BigInt
  descripcion     String
  costo           BigInt
  usuarioConfigs  UsuarioConfiguracion[] @relation("PlanDisponibleRelation")
}

model RolPermiso {
  id          BigInt       @id @default(autoincrement())
  permiso     String
  usuarioRols UsuarioRol[] // Relación muchos-a-muchos
}

model informacion {
  id            BigInt @id @default(autoincrement())
  pregunta   String?
  respuesta   String?
}

model ListaTarifa {
  id              BigInt                 @id @default(autoincrement())
  tarifa          String
  usuarioListat  Usuario[] @relation("ListaTarifaRelation")
}

model Usuario {
  id              BigInt               @id @default(autoincrement())
  email           String @unique
  nombre          String
  apellido        String?
  edad            BigInt?
  genero          String?
  telefono        String?
  tarifaId        BigInt
  configuracionId BigInt?
  rolId           BigInt?
  
  configuracion   UsuarioConfiguracion? @relation("UsuarioConfigRelation", fields: [configuracionId], references: [id])
  rol             UsuarioRol?          @relation("UsuarioRolRelation", fields: [rolId], references: [id])
  grupos          UsuarioGrupo[]       @relation("UsuarioGrupoRelation")
  listaTarifa       ListaTarifa          @relation("ListaTarifaRelation", fields: [tarifaId], references: [id])
}

model UsuarioConfiguracion {
  id                    BigInt               @id @default(autoincrement())
  periodoFacturacion    String
  consumoAnterior       BigInt
  consumoActual         BigInt
  planActualId          BigInt
  
  planDisponible    PlanDisponible       @relation("PlanDisponibleRelation", fields: [planActualId], references: [id])
  usuarios          Usuario[]            @relation("UsuarioConfigRelation")
  configuracionAlertas ConfiguracionAlerta[] @relation("ConfiguracionAlertaRelation")
}

model UsuarioRol {
  id        BigInt      @id @default(autoincrement())
  rol       String
  permisos  RolPermiso[] // Relación muchos-a-muchos
  usuarios  Usuario[]   @relation("UsuarioRolRelation")
}

model UsuarioGrupo {
  id             BigInt           @id @default(autoincrement())
  nombre         String
  historialId    BigInt?
  usuarioId      BigInt // Nuevo campo
  
  historial      GrupoHistorial?  @relation("GrupoHistorialRelation", fields: [historialId], references: [id])
  usuario        Usuario          @relation("UsuarioGrupoRelation", fields: [usuarioId], references: [id]) // Relación corregida
  dispositivos   Dispositivo[]    @relation("GrupoDispositivoRelation") // Nueva relación
}

model GrupoHistorial {
  id          BigInt          @id @default(autoincrement())
  periodo     BigInt?
  fechaCorte  DateTime?
  consumo     BigInt?
  grupos      UsuarioGrupo[]  @relation("GrupoHistorialRelation")
}

model Dispositivo {
  id                  BigInt           @id @default(autoincrement())
  codigoesp           String? @unique // Código único, se usará para vincular los consumos
  nombreDispositivo   String
  consumoAparatoSug   BigInt
  ubicacionId         BigInt
  listaUbicacion      String
  grupoId             BigInt? 

  grupo               UsuarioGrupo?    @relation("GrupoDispositivoRelation", fields: [grupoId], references: [id])
  consumos            Consumo[]        // Relación con tabla de consumos
}


model Consumo {
  id              BigInt     @id @default(autoincrement())
  codigoesp       String     // Relación indirecta con Dispositivo
  voltaje         Decimal
  corriente       Decimal
  potencia        Decimal
  energia         Decimal
  fechaHora       DateTime   @default(now()) // Importante: para saber cuándo se registró

  dispositivo     Dispositivo? @relation(fields: [codigoesp], references: [codigoesp])
}
